// Init this project
var cms 			= 'wordpress';
var domain			= 'koeien.nl'; 					// i.e. studio5A2.nl
var dev_domain		= domain + '.dev.studio5A2.nl'; // 'dev.' + domain OR domain + '.dev.studio5A2.nl';

// Environments
var local_domain	= 'local.' + domain;

// Load modules
var gulp 			= require('gulp');
var del 			= require('del');
var flatten 		= require('gulp-flatten');
var header 			= require('gulp-header');
var	rename 			= require('gulp-rename');
var rsync 			= require('rsyncwrapper').rsync;
var plumber			= require('gulp-plumber');
var	browserSync 	= require('browser-sync').create();
var sourcemaps 		= require('gulp-sourcemaps');
var	sass 			= require('gulp-sass');
var	sassGlob 		= require('gulp-sass-glob-import');
var urlAdjuster 	= require('gulp-css-url-adjuster');
var	autoprefixer 	= require('gulp-autoprefixer');
var	concat 			= require('gulp-concat');
var	uglify 			= require('gulp-uglify');
var imagemin 		= require('gulp-imagemin');
var svgmin 			= require('gulp-svgmin');
var taskListing 	= require('gulp-task-listing');
var notify 			= require('gulp-notify');
var cssmin 			= require('gulp-cssmin');

/*----------------------------------------------------*/

/**
 * Paths to project folders
 */
var paths = {
	all: {
		input: 'src/**/*',
		output: 'dist/'
	},
	scripts_app: {
		input: 	'src/js/**/*.js',
		output: 'dist/js/'
	},
	scripts_vendor: {
		input: 	'src/js/vendor/**/*.js',
		output: 'dist/js/'
	},
	scripts_admin: {
		input: 	'src/js/admin/**/*.js',
		output: 'dist/js/'
	},
	styles: {
		input: 	'src/sass/**/*.{scss,sass}',
		output: 'dist/css/'
	},
	fonts: {
		input: 	'src/fonts/**/*',
		output: 'dist/fonts/'
	},
	svgs: {
		input: 	'src/svg/*',
		output: 'dist/svg/'
	},
	images: {
		input: 	'src/img/*',
		output: 'dist/img/'
	},
	cmsImages: {
		input: '../../uploads/**/*',
		backup:'../../uploads/backup-uploads/',
		output:'../../uploads/**/*'
	},
	php: {
		input: '**/*.php'
	},
	error: function(error) {
        notify.onError({
            title: 'Gulp',
            message: 'Error: <%= error.message %>'
        })(error);
        this.emit('end');
    }
};


/**
 * Template for banner to add to file headers
 * One for CSS and one for JS
 */
var banner = {
	full :
		'/*!\n' +
		" * DON'T EDIT THIS FILE!\n" +
		' * Generated by Gulp on ' + new Date().getFullYear() + '\n' +
		' * This website is developed by:\n' +
		' * studio5A2 (http://5A2.nl/)\n' +
		' */\n\n'
};

/**
 * Create clean: tasks
 * These tasks remove pre-existing content from output folders specific to the folder that will be created
 */
for(var type in paths) {
	var oPath = paths[type];
	// only get the output paths
	if(typeof oPath == 'object' && typeof oPath.output != 'undefined') {
		// create task like clean:all, clean:images, etc
		gulp.task('clean:' + type, function () {
			return del.sync(oPath.output);
		});
	}
}

/**
 * backup uploads
 */
gulp.task('backup:uploads', function () {
	return gulp.src(paths.cmsImages.input)
		.pipe(gulp.dest(paths.cmsImages.backup))
});


/**
 * 	Compress images
 */
gulp.task('build:images', ['clean:images'], function() {
	return gulp.src(paths.images.input)
//		.pipe(imagemin())
		.pipe(gulp.dest(paths.images.output))
});

/**
 * 	Compress fonts
 */
gulp.task('build:fonts', ['clean:fonts'], function() {
	return gulp.src(paths.fonts.input)
//		TODO
		.pipe(gulp.dest(paths.fonts.output))
});

// specific for Wordpress (if you're using Drupal Change the path)
gulp.task('cms:images', ['backup:uploads'], function() {
	return gulp.src(paths.cmsImages.input)
		// .pipe(imagemin())
		// .pipe(gulp.dest(paths.cmsImages.output))
});

/**
 *  Compress SVG and Generate Sprites
 */
gulp.task('build:svgs', ['clean:svgs'], function () {
	return gulp.src(paths.svgs.input)
		.pipe(svgmin())
		.pipe(gulp.dest(paths.svgs.output))
});

/**
 * Compress and combine JS files (2 outputfiles -> vendor and app.js)
 */
gulp.task('build:scripts', ['clean:scripts_app', 'clean:scripts_vendor', 'clean:scripts_admin'], function() {
	// array of scripts that should be generated
	var aScripts = [{
		// app.js
		filename: 'app.js',
		srcDir: [paths.scripts_app.input, '!' + paths.scripts_vendor.input, '!' + paths.scripts_admin.input],
		destDir: paths.scripts_app.output,
	}, {
		// vendor.js
		filename: 'vendor.js',
		srcDir: [paths.scripts_vendor.input],
		destDir: paths.scripts_vendor.output,
	}, {
		// admin.js
		filename: 'admin.js',
		srcDir: [paths.scripts_admin.input],
		destDir: paths.scripts_admin.output,
	}];

	// loop scripts and run gulp tasks
	for(var i = 0; i < aScripts.length; i++) {
		// init script paths
		var oScript = aScripts[i];

		// run gulp task
		gulp.src(oScript.srcDir)
			.pipe(plumber({
				errorHandler: paths.error
			}))
			.pipe(sourcemaps.init())
			.pipe(header(banner.full))
			.pipe(concat(oScript.filename))
			.pipe(gulp.dest(oScript.destDir))
			.pipe(rename({ suffix: '.min' }))
			.pipe(uglify())
			.pipe(sourcemaps.write("./"))
			.pipe(gulp.dest(oScript.destDir));
	}

	// browser reload
	return browserSync.reload();
});

/**
 *  Browser sync
 */
gulp.task('serve', function() {
	browserSync.init({
		 proxy: local_domain
	});
});

/**
 * Process, lint, and minify Sass files
 * @todo sourcemaps breekt browsersync stream
 * @todo op het laatst pas oude CSS weggooien
 */
gulp.task('build:styles', ['clean:styles'], function() {
	return gulp.src(paths.styles.input)
		.pipe(plumber({
			errorHandler: paths.error
		}))
		.pipe(sourcemaps.init())
		.pipe(sassGlob())
		.pipe(sass())
		.pipe(urlAdjuster({
			prependRelative: '../img/',
			append: '?version=' + Date.now()
		}))
		.pipe(flatten())
		.pipe(autoprefixer({
			browsers: ['> 1%', 'last 3 versions']
		}))
		.pipe(gulp.dest(paths.styles.output))
		.pipe(sourcemaps.write("./"))

		.pipe(cssmin())
		.pipe(rename({ suffix: '.min' }))
		.pipe(gulp.dest(paths.styles.output))
		.pipe(browserSync.reload({stream: true}));
});

/**
 * Build PHP
 */
gulp.task('build:php', function() {
	return browserSync.reload();
});

/************************************************
 * MAIN TASKS
 ************************************************/

/**
 * Watch all
 */
gulp.task('watch', function() {
	gulp.watch(paths.php.input,	           ['build:php']);
	gulp.watch(paths.styles.input,         ['build:styles']);
	gulp.watch(paths.scripts_vendor.input, ['build:scripts']);
	gulp.watch(paths.scripts_app.input,    ['build:scripts']);
	gulp.watch(paths.scripts_admin.input,  ['build:scripts']);
	gulp.watch(paths.svgs.input,           ['build:svgs']);
	gulp.watch(paths.images.input,         ['build:images']);
});

/**
 * Build all
 */
gulp.task('build', ['build:php','build:styles','build:scripts','build:svgs','build:images', 'build:fonts']);

/**
 * Build all and watch task at the beginning
 */
gulp.task('default', ['build', 'watch', 'serve']);

/**
 * Call gulp help to view all possible tasks of this gulp file
 */
gulp.task('help', taskListing);
